#include <iostream>
#include <ctime>
#include <random>
#include <string>
#include <array>

using namespace std;

const char MAIN_MENU_EXIT_KEY = '5';

/*
These are function prototypes.
They have to match the function further down the page,
but they help the compiler keep code ordered.
If you need to add a funtion, add a matching protype()
*/

void printMenu();
void generateStartingArea();
void generateDungeonChamber();
void generateDungeonDoor();
void generateDungeonPassage();
void generatePassageWidth();
void generateDoorContents();
int rollDice(int numberOfDice, int sizeOfDice);

void printMenu()
{
	cout << "1.) Generate a starting area." << endl;
	cout << "2.) Generate a single chamber." << endl;
	cout << "3.) Generate a passage." << endl;
	cout << "4.) Generate a door." << endl;
	cout << "5.) Exit" << endl;
}

/*
These functions will generate random components
of a dungeon.
*/
void generateStartingArea()
{
	int startingAreaRoll = rollDice(1, 10);
	switch (startingAreaRoll)
	{
	case 1:
		cout << "Square, 20 x 20ft.; passage on each wall" << endl;
			break;
	case 2:
		cout << "Square, 20 x 20ft.; door on two walls, passage in third wall" << endl;
			break;
	case 3:
		cout << "Square, 40 x 40ft.; doors on three walls" << endl;
			break;
	case 4:
		cout << "Rectangle, 80 x 20 ft.; with row of pillars down the middle; two passages leading from each long wall, doors on each short wall" << endl;
			break;
	case 5:
		cout << "Rectangle, 20 x 40 ft.; Passage on each wall" << endl;
			break;
	case 6:
		cout << "Circle, 40 ft. diameter; one passage at each cardinal direction" << endl;
			break;
	case 7:
		cout << "Circle, 40 ft. diameter; one passage in each cardinal direction; well in middle of room (might lead down to lower level)" << endl;
			break;
	case 8:
		cout << "Square, 20 x 20 ft.; door on two walls, passage on third wall, secret door on fourth wall" << endl;
			break;
	case 9:
		cout << "Passage, 10 ft. wide; T intersection" << endl;
			break;
	case 10:
		cout << "Passage, 10 ft. wide; four way intersection" << endl;
			break;
	}
}


void generateDungeonChamber()
{
	cout << "Here's a chamber with random parameters!" << endl;
}

void generateDungeonDoor()
{
	int doorRoll = rollDice(1, 20);
	switch (doorRoll)
	{
	case 1:
	case 2:
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
	case 10:
		cout << "Wooden \n";
		break;
	case 11:
	case 12:
		cout << "Wooden, barred or locked \n";
		break;
	case 13:
		cout << "Stone  \n";
		break;
	case 14:
		cout << "Stone, barred or locked \n";
		break;
	case 15:
		cout << "Iron \n";
		break;
	case 16:
		cout << "Iron, barred or locked \n";
		break;
	case 17:
		cout << "Portcullis \n";
		break;
	case 18:
		cout << "Portcullis, locked in place \n";
		break;
	case 19:
		cout << "Secret door \n";
		break;
	case 20:
		cout << "Secret door, barred or locked \n";
		break;
	}
}

void generateDungeonPassage()
{
	generatePassageWidth();
	int passageRoll = rollDice(1, 20);
	switch (passageRoll)
	{
	case 1:
	case 2:
		cout << "continues straight 30 feet, with no doors or side passages." << endl;
			break;
	case 3:
		cout << "continues straight 20 feet, with a door to the right, then an additional 10 feet ahead." << endl;
			break;
	case 4:
		cout << "continues straight 20 feet, with a door to the right, then an additional 10 feet ahead." << endl;
			break;
	case 5:
		cout << "continues straight 20 feet, passage ends in a door." << endl;
			break;
	case 6:
	case 7:
		cout << "continues straight 20 feet, with a side passage to the right then an additional 10 feet ahead." << endl;
			break;
	case 8:
	case 9:
		cout << "continues straight 20 feet, side passage to the left, then an additional 10 feet ahead." << endl;
			break;
	case 10:
		cout << "continues straight 20 feet, comes to a dead end, with a 10 percent chance of secret door." << endl;
			break;
	case 11:
	case 12:
		cout << "continues straight 20 feet, then the passage turns left and continuess 10 feet." << endl;
			break;
	case 13:
	case 14:
		cout << "continues straight 20 feet, then the passage turns right and continuess 10 feet." << endl;
			break;
	case 15:
	case 16:
	case 17:
	case 18:
	case 19:
		cout << "Chamber (Roll on the Chamber Table)" << endl;
			break;
	case 20:
		cout << "Stairs (Roll on the Stairs Table)" << endl;
			break;
	}

}

void generatePassageWidth()
{
	int passageWidthRoll = rollDice(1, 20);
	switch (passageWidthRoll)
	{
	case 1:
	case 2:
		cout << "The passage is 5 feet wide, and ";
		break;
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
	case 10:
	case 11:
	case 12:
		cout << "The passage is 10 feet wide, and ";
		break;
	case 13:
	case 14:
		cout << "The passage is 20 feet wide, and ";
		break;
	case 15:
	case 16:
		cout << "The passage is 30 feet wide, and ";
		break;
	case 17:
		cout << "The passage is 40 feet wide with a row of pillars down the middle, and ";
		break;
	case 18:
		cout << "The passage is 40 feet wide with a double row of pillars, and ";
		break;
	case 19:
		cout << "The passage is 40 feet wide, 20 feet high, and ";
		break;
	case 20:
		cout << "The passage is 40 feet, 20 feet high, and has a gallery 10 feet above the floor allowing access to the level above. It then ";
		break;
	}
}

void generateDoorContents()
{
	int doorContentsRoll = rollDice(1, 20);
	switch (doorContentsRoll)
	{
	case 1:
	case 2:
		cout << "Passage extending 10 ft., the T intersection extending 10 ft. to the right left. \n";
		generatePassageWidth();
		break;
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
	case 8:
		cout << "Passage 20 ft. straight ahead. /n";
		generatePassageWidth();
		break;
	case 9:
	case 10:
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
	case 16:
	case 17:
	case 18:
		cout << "Chamber (Roll on the chamber table) \n";
		break;
	case 19:
		cout << "Stairs (Roll on the Stairs table) \n";
		break;
	case 20:
		cout << "False door with trap \n";
		break;
	}
}

int rollDice(int numberOfDice, int sizeOfDice)
{
	int rollTotal = 0;
	static default_random_engine randomEngine(time(0)); //crates the actual engine and seeds it with time.
	uniform_int_distribution<int> diceRoll(1, sizeOfDice); //establishes a range

	for (int i = 0; i < numberOfDice; i++)
	{
		rollTotal += diceRoll(randomEngine);//calls the range and random engine seeded with time
	}
	return rollTotal;
}

int main()
{
	char input = 0;

	cout << "Welcome to Dungeon-ator!!!" << endl;
	cout << endl;
	do
	{
		printMenu();
		cout << "Enter your menu choice: ";
		cin >> input;
		while (input < '1' || input > MAIN_MENU_EXIT_KEY)
		{

		}
		switch (input)
		{
		case '1': generateStartingArea();
			break;
		case '2': generateDungeonChamber();
			break;
		case '3': generateDungeonPassage();
			break;
		case '4': generateDungeonDoor();
			break;
		case '5':
			break;
		}
	} while (input != MAIN_MENU_EXIT_KEY);

		return 0;
}
