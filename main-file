#include <iostream>
#include <ctime> // we need to include these for proper RNG
#include <random>
#include <string>
#include <array>

using namespace std;

const char MAIN_MENU_EXIT_KEY = 'e';

/*
These are function prototypes. 
They have to match the function further down the page,
but they help the compiler keep code ordered.
If you need to add a funtion, add a matching protype()
*/

void printMenu();
void generateStartingArea();
void generateDungeonRoom();
void generateDungeonDoor();
void generateDungeonPassage();
void generatePassagewidth();
void generateDoorContents();
int rollDice(int numberOfDice, int sizeOfDice);

void printMenu()
{
	cout << "Here's a menu with a bunch of cool options!" << endl;
}

/*
These functions will generate random components
 of a dungeon.
 */
void generateStartingArea()
{
	int startingAreaRoll = rollDice(1, 10);
	switch(startingAreaRoll)
	{
	case 1:
		cout << "Square, 20 x 20ft.; passage on each wall\n";
		break;
	case 2:
		cout << "Square, 20 x 20ft.; door on two walls, passage in third wall\n";
		break;
	case 3:
		cout << "Square, 40 x 40ft.; doors on three walls\n";
		break;
	case 4:
		cout << "Rectangle, 80 x 20 ft.; with row of pillars down the middle; two passages leading from each long wall, doors on each short wall\n";
		break;
	case 5:
		cout << "Rectangle, 20 x 40 ft.; Passage on each wall\n";
		break;
	case 6:
		cout << "Circle, 40 ft. diameter; one passage at each cardinal direction\n";
		break;
	case 7:
		cout << "Circle, 40 ft. diameter; one passage in each cardinal direction; well in middle of room (might lead down to lower level)\n";
		break;
	case 8:
		cout << "Square, 20 x 20 ft.; door on two walls, passage on third wall, secret door on fourth wall\n";
		break;
	case 9:
		cout << "Passage, 10 ft. wide; T intersection\n";
		break;
	case 10:
		cout << "Passage, 10 ft. wide; four way intersection\n";
		break;
	}
}


void generateDungeonRoom()
{
	cout << "Here's a room with random parameters!" << endl;
}

void generateDungeonDoor()
{
	cout << "Here's a door with some random features!" << endl;
}

void generateDungeonPassage()
{
	int passageRoll = rollDice(1, 20);
	switch (passageRoll)
	{
	case 1:
	case 2:
		cout << "continues straight 30 feet, with no doors or side passages.\n";
		break;
	case 3:
		cout << "continues straight 20 feet, with a door to the right, then an additional 10 feet ahead.\n";
		break;
	case 4:
		cout << "continues straight 20 feet, with a door to the right, then an additional 10 feet ahead.\n";
		break;
	case 5:
		cout << "continues straight 20 feet, passage ends in a door.\n";
		break;
	case 6:
	case 7:
		cout << "continues straight 20 feet, with a side passage to the right then an additional 10 feet ahead.\n";
		break;
	case 8:
	case 9:
		cout << "continues straight 20 feet, side passage to the left, then an additional 10 feet ahead.\n";
		break;
	case 10:
		cout << "continues straight 20 feet, comes to a dead end, with a 10 percent chance of secret door.\n";
		break;
	case 11:
	case 12:
		cout << "continues straight 20 feet, then the passage turns left and continuess 10 feet.\n";
		break;
	case 13:
	case 14:
		cout << "continues straight 20 feet, then the passage turns right and continuess 10 feet.\n"
		break;
	case 15:
	case 16:
	case 17:
	case 18:
	case 19:
		cout << "Chamber (Roll on the Chamber Table)\n";
		break;
	case 20:
		cout << "Stairs (Roll on the Stairs Table)\n";
		break;
	}
	
}

void generatePassageWidth()
{
	int passageWidthRoll = rollDice(1, 20);
	switch (passageWidthRoll)
	{
	case 1:
	case 2:
		cout << "The passage is 5 feet wide, and ";
		break;
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
	case 10:
	case 11:
	case 12:
		cout << "The passage is 10 feet wide, and ";
		break;
	case 13:
	case 14:
		cout << "The passage is 20 feet wide, and ";
		break;
	case 15:
	case 16:
		cout << "The passage is 30 feet wide, and ";
		break;
	case 17:
		cout << "The passage is 40 feet wide with a row of pillars down the middle, and ";
		break;
	case 18:
		cout << "The passage is 40 feet wide with a double row of pillars, and ";
		break;
	case 19:
		cout << "The passage is 40 feet wide, 20 feet high, and ";
		break;
	case 20:
		cout << "The passage is 40 feet, 20 feet high, and has a gallery 10 feet above the floor allowing access to the level above. It then ";
		break;
	}
}

void generateDoorContents()
{
	cout << "This is what's behind a door!" << endl;
}

int rollDice(int numberOfDice, int sizeOfDice)
{	
	int rollTotal = 0;
	static default_random_engine randomEngine(time(0)); //crates the actual engine and seeds it with time.
	unfiorm_int_distribution<int> diceRoll(1, sizeOfDice); //establishes a range
	
	for (int i = 0; i < numberOfDice; i++)
	{
		rollTotal += diceRoll(randomEngine);//calls the range and random engine seeded with time
	}
	return rollTotal;
}

int main() 
{
	char input = 0;
	
	cout << "Welcome to Dungeon-ator!!!" << endl;
	cout << endl;
	do
	{
		printMenu();
		cout << "Enter your menu choice: ";
		cin >> input;
		switch(input)
		{
		}
	}while(input != MAIN_MENU_EXIT_KEY)

return 0;
}
